package com.prueba;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.util.Arrays;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.junit4.SpringRunner;

import com.prueba.entity.Telefono;
import com.prueba.entity.Usuario;
import com.prueba.repository.UsuarioRepository;
import com.prueba.response.ResponseCredenciales;
import com.prueba.response.ResponseToken;
import com.prueba.response.ResponseUsuario;
import com.prueba.service.UsuarioService;

@RunWith(SpringRunner.class)
@SpringBootTest
public class UsuarioServiceTest {

	@Autowired
	private UsuarioService usuarioService;

	@MockBean
	private UsuarioRepository usuarioRepository;

	@Test
	public void testRegistroExitoso() {
		Usuario usuario = new Usuario();
		usuario.setNombre("John");
		usuario.setCorreo("johnpro38@gmail.com");
		usuario.setContrasena("194726082aA");

		Telefono telefono1 = new Telefono();
		telefono1.setNumero("1234567");
		telefono1.setCodigoCiudad("12");
		telefono1.setCodigoPais("57");

		Telefono telefono2 = new Telefono();
		telefono2.setNumero("2222222");
		telefono2.setCodigoCiudad("32");
		telefono2.setCodigoPais("99");

		usuario.setPhones(Arrays.asList(telefono1, telefono2));

		when(usuarioRepository.findByCorreo(anyString())).thenReturn(null);
		when(usuarioRepository.save(any(Usuario.class))).thenReturn(usuario);

		ResponseUsuario response = usuarioService.guardarUsuario(usuario);

		assertNotNull(response.getData());
		assertEquals("ok", response.getMessage());

		Usuario usuarioGuardado = response.getData();
		assertNotNull(usuarioGuardado.getPhones());
		assertEquals(2, usuarioGuardado.getPhones().size());
	}

	@Test
	public void testRegistroDuplicado() {
		Usuario usuario = new Usuario();
		usuario.setCorreo("johnpro38@gmail.com");
		usuario.setContrasena("Pass123");

		when(usuarioRepository.findByCorreo("johnpro38@gmail.com")).thenReturn(usuario);

		ResponseUsuario response = usuarioService.guardarUsuario(usuario);

		assertEquals("El correo ya registrado", response.getMessage());
	}

	@Test
	public void testLoginExitoso() {
		String correo = "johnpro38@gmail.com";
		String contrasena = "194726082aA";
		Usuario usuarioMock = new Usuario();
		usuarioMock.setCorreo(correo);
		usuarioMock.setContrasena(contrasena);
		usuarioMock.setToken("mockedToken"); // Simulamos un token ya generado

		when(usuarioRepository.findByCorreoAndContrasena(correo, contrasena)).thenReturn(usuarioMock);

		ResponseToken response = usuarioService.autenticarYObtenerToken(correo, contrasena);

		assertNotNull(response.getToken());
		assertEquals("Autenticación exitosa", response.getMessage()); // Ajustamos el mensaje esperado
		verify(usuarioRepository, times(1)).findByCorreoAndContrasena(correo, contrasena);
	}

	@Test
	public void testLoginFallido() {
		String correo = "johnpro38@gmail.com";
		String contrasena = "invalidpass";

		when(usuarioRepository.findByCorreoAndContrasena(correo, contrasena)).thenReturn(null);

		ResponseToken response = usuarioService.autenticarYObtenerToken(correo, contrasena);

		assertEquals("Credenciales inválidas o Usuario no Existe", response.getMessage());
		assertEquals("Invalido", response.getToken());
		verify(usuarioRepository, times(1)).findByCorreoAndContrasena(correo, contrasena);
	}

}
