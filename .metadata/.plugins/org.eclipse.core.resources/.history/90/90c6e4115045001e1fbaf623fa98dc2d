package com.prueba.impl;

import java.util.ArrayList;
import java.util.List;

import javax.validation.Validator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.validation.ValidationUtils;

import com.prueba.entity.Telefono;
import com.prueba.entity.Usuario;
import com.prueba.repository.TelefonoRepository;
import com.prueba.repository.UsuarioRepository;
import com.prueba.response.ResponseToken;
import com.prueba.response.ResponseUsuario;
import com.prueba.service.UsuarioService;

@Service
public class UsuarioServiceImpl implements UsuarioService {

	@Autowired
	private UsuarioRepository repository;

	@Autowired
	private TelefonoRepository telefonoRepository;
	
	private final Validator validator;

    public UsuarioServiceImpl(Validator validator) {
        this.validator = validator;
    }

	@Override
	public Usuario findById(Long id) {
		return repository.findById(id).orElse(null);
	}

	@Override
	public Usuario save(Usuario request) {
		return repository.save(request);
	}

	@Override
	public List<Usuario> findAll() {
		return repository.findAll();
	}

	@Override
	public void deleteById(Long id) {
		repository.deleteById(id);

	}

	@Override
	public ResponseUsuario guardarUsuario(Usuario usuario) {
		ResponseUsuario response = new ResponseUsuario();
		Usuario buscar = repository.findByCorreo(usuario.getCorreo());
		if (buscar != null) {
			response.setMessage("El correo ya registrado");
			return response;
		}

		if (!com.prueba.Util.Util.validarString(usuario.getContrasena())) {
			response.setMessage("Contraseña No Cumple Con los Caracteres Requeridos");
			response.setData(usuario);
			return response;
		}

		if (usuario.getToken() == null || usuario.getToken().isEmpty()) {
			String token = com.prueba.Util.Util.generateOtp(usuario.getCorreo());
			usuario.setToken(token);
		}
		BindingResult result = new BeanPropertyBindingResult(usuario, "usuario");
        ValidationUtils.invokeValidator((org.springframework.validation.Validator) validator, usuario, result);
        
        if (result.hasErrors()) {
            FieldError fieldError = result.getFieldErrors().get(0);
            response.setMessage(fieldError.getDefaultMessage());
            return response;
        }

		try {
			List<Telefono> telefonos = new ArrayList<>();
			for (Telefono telefono : usuario.getPhones()) {
				telefono.setUser(usuario);
				telefonos.add(telefono);
			}
			usuario.setPhones(telefonos);
			Usuario usersave = repository.save(usuario);

			response.setMessage("ok");
			response.setData(usersave);
		} catch (Exception e) {
			response.setMessage("Fallo El Servicio de Guardado" + e.getMessage());
			return response;
		}

		return response;
	}

	@Override
	public ResponseUsuario actualizarUsuario(Usuario usuario) {
		ResponseUsuario response = new ResponseUsuario();

		Usuario usuarioExistente = repository.findByCorreo(usuario.getCorreo());

		if (usuarioExistente == null) {
			response.setMessage("El Correo No Está Registrado");
			return response;
		}

		if (!com.prueba.Util.Util.validarString(usuario.getContrasena())) {
			response.setMessage("Contraseña No Cumple Con los Caracteres Requeridos");
			response.setData(usuario);
			return response;
		}

		if (usuario.getToken() == null || usuario.getToken().isEmpty()) {
			String token = com.prueba.Util.Util.generateOtp(usuario.getCorreo());
			usuario.setToken(token);
		}

		if (!com.prueba.Util.Util.verifyOtpToken(usuario.getToken())) {
			response.setMessage("Token Inválido");
			return response;
		}

		try {
			for (Telefono telefono : usuario.getPhones()) {
				Telefono telefonoExistente = telefonoRepository.findByNumero(telefono.getNumero());
				if (telefonoExistente != null) {
					telefonoExistente.setCodigoCiudad(telefono.getCodigoCiudad());
					telefonoExistente.setCodigoPais(telefono.getCodigoPais());
				}
			}
			Usuario usuarioModificado = repository.save(usuarioExistente);
			response.setMessage("Usuario Modificado Exitosamente");
			response.setData(usuarioModificado);
		} catch (Exception e) {
			response.setMessage("Fallo El Servicio de Modificación: " + e.getMessage());
			return response;
		}

		return response;
	}

	@Override
	public ResponseToken autenticarYObtenerToken(String correo, String contrasena) {
		ResponseToken responseToken = new ResponseToken();

		Usuario usuario = repository.findByCorreoAndContrasena(correo, contrasena);

		  BindingResult result = new BeanPropertyBindingResult(usuario, "usuario");
	        ValidationUtils.invokeValidator((org.springframework.validation.Validator) validator, usuario, result);

	        if (result.hasErrors()) {
	            responseToken.setToken("Invalido");
	            responseToken.setMessage("Credenciales inválidas");
	            return responseToken;
	        }

		String token = usuario.getToken();

		if (token == null || token.isEmpty()) {
			token = com.prueba.Util.Util.generateOtp(usuario.getCorreo());
			usuario.setToken(token);
			repository.save(usuario);
		}

		responseToken.setToken(token);
		responseToken.setMessage("Autenticación exitosa");
		return responseToken;
	}

}
